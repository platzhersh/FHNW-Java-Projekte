
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000424  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009fe  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000348  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000846  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ad  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000708  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00002661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e2       	ldi	r30, 0x24	; 36
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	4f d1       	rcall	.+670    	; 0x3ae <main>
 110:	87 c1       	rjmp	.+782    	; 0x420 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <toggle_e>:
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
 114:	5e 9a       	sbi	0x0b, 6	; 11
 116:	00 c0       	rjmp	.+0      	; 0x118 <toggle_e+0x4>
 118:	5e 98       	cbi	0x0b, 6	; 11
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	66 23       	and	r22, r22
 122:	11 f0       	breq	.+4      	; 0x128 <lcd_write+0xc>
 124:	5c 9a       	sbi	0x0b, 4	; 11
 126:	01 c0       	rjmp	.+2      	; 0x12a <lcd_write+0xe>
 128:	5c 98       	cbi	0x0b, 4	; 11
 12a:	5d 98       	cbi	0x0b, 5	; 11
 12c:	ea e0       	ldi	r30, 0x0A	; 10
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 83       	st	Z, r24
 13c:	52 9a       	sbi	0x0a, 2	; 10
 13e:	53 9a       	sbi	0x0a, 3	; 10
 140:	5b 98       	cbi	0x0b, 3	; 11
 142:	5a 98       	cbi	0x0b, 2	; 11
 144:	eb e0       	ldi	r30, 0x0B	; 11
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	80 81       	ld	r24, Z
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	80 83       	st	Z, r24
 14e:	80 81       	ld	r24, Z
 150:	8f 7b       	andi	r24, 0xBF	; 191
 152:	80 83       	st	Z, r24
 154:	cc 23       	and	r28, r28
 156:	0c f4       	brge	.+2      	; 0x15a <lcd_write+0x3e>
 158:	5b 9a       	sbi	0x0b, 3	; 11
 15a:	c6 fd       	sbrc	r28, 6
 15c:	5a 9a       	sbi	0x0b, 2	; 11
 15e:	c5 ff       	sbrs	r28, 5
 160:	05 c0       	rjmp	.+10     	; 0x16c <lcd_write+0x50>
 162:	eb e0       	ldi	r30, 0x0B	; 11
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	80 81       	ld	r24, Z
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
 16c:	c4 ff       	sbrs	r28, 4
 16e:	05 c0       	rjmp	.+10     	; 0x17a <lcd_write+0x5e>
 170:	eb e0       	ldi	r30, 0x0B	; 11
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
 17a:	cc df       	rcall	.-104    	; 0x114 <toggle_e>
 17c:	5b 98       	cbi	0x0b, 3	; 11
 17e:	5a 98       	cbi	0x0b, 2	; 11
 180:	eb e0       	ldi	r30, 0x0B	; 11
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	80 81       	ld	r24, Z
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	80 83       	st	Z, r24
 190:	c3 fd       	sbrc	r28, 3
 192:	5b 9a       	sbi	0x0b, 3	; 11
 194:	c2 fd       	sbrc	r28, 2
 196:	5a 9a       	sbi	0x0b, 2	; 11
 198:	c1 ff       	sbrs	r28, 1
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <lcd_write+0x8a>
 19c:	eb e0       	ldi	r30, 0x0B	; 11
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	c0 ff       	sbrs	r28, 0
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <lcd_write+0x98>
 1aa:	eb e0       	ldi	r30, 0x0B	; 11
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
 1b4:	af df       	rcall	.-162    	; 0x114 <toggle_e>
 1b6:	eb e0       	ldi	r30, 0x0B	; 11
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	80 81       	ld	r24, Z
 1bc:	80 64       	ori	r24, 0x40	; 64
 1be:	80 83       	st	Z, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	80 83       	st	Z, r24
 1c6:	5a 9a       	sbi	0x0b, 2	; 11
 1c8:	5b 9a       	sbi	0x0b, 3	; 11
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_ini_write>:
 1ce:	5c 98       	cbi	0x0b, 4	; 11
 1d0:	5d 98       	cbi	0x0b, 5	; 11
 1d2:	ea e0       	ldi	r30, 0x0A	; 10
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	90 81       	ld	r25, Z
 1d8:	90 64       	ori	r25, 0x40	; 64
 1da:	90 83       	st	Z, r25
 1dc:	90 81       	ld	r25, Z
 1de:	90 68       	ori	r25, 0x80	; 128
 1e0:	90 83       	st	Z, r25
 1e2:	52 9a       	sbi	0x0a, 2	; 10
 1e4:	53 9a       	sbi	0x0a, 3	; 10
 1e6:	5b 98       	cbi	0x0b, 3	; 11
 1e8:	5a 98       	cbi	0x0b, 2	; 11
 1ea:	eb e0       	ldi	r30, 0x0B	; 11
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	90 81       	ld	r25, Z
 1f0:	9f 77       	andi	r25, 0x7F	; 127
 1f2:	90 83       	st	Z, r25
 1f4:	90 81       	ld	r25, Z
 1f6:	9f 7b       	andi	r25, 0xBF	; 191
 1f8:	90 83       	st	Z, r25
 1fa:	88 23       	and	r24, r24
 1fc:	0c f4       	brge	.+2      	; 0x200 <lcd_ini_write+0x32>
 1fe:	5b 9a       	sbi	0x0b, 3	; 11
 200:	86 fd       	sbrc	r24, 6
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	85 ff       	sbrs	r24, 5
 206:	05 c0       	rjmp	.+10     	; 0x212 <lcd_ini_write+0x44>
 208:	eb e0       	ldi	r30, 0x0B	; 11
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	90 81       	ld	r25, Z
 20e:	90 68       	ori	r25, 0x80	; 128
 210:	90 83       	st	Z, r25
 212:	84 ff       	sbrs	r24, 4
 214:	05 c0       	rjmp	.+10     	; 0x220 <lcd_ini_write+0x52>
 216:	eb e0       	ldi	r30, 0x0B	; 11
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	80 81       	ld	r24, Z
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 83       	st	Z, r24
 220:	79 df       	rcall	.-270    	; 0x114 <toggle_e>
 222:	eb e0       	ldi	r30, 0x0B	; 11
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
 22c:	80 81       	ld	r24, Z
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	80 83       	st	Z, r24
 232:	5a 9a       	sbi	0x0b, 2	; 11
 234:	5b 9a       	sbi	0x0b, 3	; 11
 236:	08 95       	ret

00000238 <lcd_read>:
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <lcd_read+0x8>
 23c:	5c 9a       	sbi	0x0b, 4	; 11
 23e:	01 c0       	rjmp	.+2      	; 0x242 <lcd_read+0xa>
 240:	5c 98       	cbi	0x0b, 4	; 11
 242:	5d 9a       	sbi	0x0b, 5	; 11
 244:	ea e0       	ldi	r30, 0x0A	; 10
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	80 81       	ld	r24, Z
 24a:	8f 7b       	andi	r24, 0xBF	; 191
 24c:	80 83       	st	Z, r24
 24e:	80 81       	ld	r24, Z
 250:	8f 77       	andi	r24, 0x7F	; 127
 252:	80 83       	st	Z, r24
 254:	52 98       	cbi	0x0a, 2	; 10
 256:	53 98       	cbi	0x0a, 3	; 10
 258:	5e 9a       	sbi	0x0b, 6	; 11
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_read+0x24>
 25c:	80 91 09 01 	lds	r24, 0x0109
 260:	86 fd       	sbrc	r24, 6
 262:	02 c0       	rjmp	.+4      	; 0x268 <lcd_read+0x30>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	01 c0       	rjmp	.+2      	; 0x26a <lcd_read+0x32>
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	90 91 09 01 	lds	r25, 0x0109
 26e:	99 23       	and	r25, r25
 270:	0c f4       	brge	.+2      	; 0x274 <lcd_read+0x3c>
 272:	80 62       	ori	r24, 0x20	; 32
 274:	4a 99       	sbic	0x09, 2	; 9
 276:	80 64       	ori	r24, 0x40	; 64
 278:	4b 99       	sbic	0x09, 3	; 9
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	5e 98       	cbi	0x0b, 6	; 11
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_read+0x48>
 280:	5e 9a       	sbi	0x0b, 6	; 11
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_read+0x4c>
 284:	90 91 09 01 	lds	r25, 0x0109
 288:	96 fd       	sbrc	r25, 6
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	90 91 09 01 	lds	r25, 0x0109
 290:	99 23       	and	r25, r25
 292:	0c f4       	brge	.+2      	; 0x296 <lcd_read+0x5e>
 294:	82 60       	ori	r24, 0x02	; 2
 296:	4a 99       	sbic	0x09, 2	; 9
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	4b 99       	sbic	0x09, 3	; 9
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	08 95       	ret

000002a2 <lcd_waitbusy>:
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	c9 df       	rcall	.-110    	; 0x238 <lcd_read>
 2a6:	88 23       	and	r24, r24
 2a8:	e4 f3       	brlt	.-8      	; 0x2a2 <lcd_waitbusy>
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_waitbusy+0xc>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	c1 cf       	rjmp	.-126    	; 0x238 <lcd_read>
 2b6:	08 95       	ret

000002b8 <lcd_command>:
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	f2 df       	rcall	.-28     	; 0x2a2 <lcd_waitbusy>
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	8c 2f       	mov	r24, r28
 2c2:	2c df       	rcall	.-424    	; 0x11c <lcd_write>
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <lcd_putc>:
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
 2cc:	ea df       	rcall	.-44     	; 0x2a2 <lcd_waitbusy>
 2ce:	ca 30       	cpi	r28, 0x0A	; 10
 2d0:	99 f4       	brne	.+38     	; 0x2f8 <lcd_putc+0x30>
 2d2:	80 32       	cpi	r24, 0x20	; 32
 2d4:	48 f0       	brcs	.+18     	; 0x2e8 <lcd_putc+0x20>
 2d6:	90 ee       	ldi	r25, 0xE0	; 224
 2d8:	98 0f       	add	r25, r24
 2da:	90 32       	cpi	r25, 0x20	; 32
 2dc:	38 f0       	brcs	.+14     	; 0x2ec <lcd_putc+0x24>
 2de:	80 54       	subi	r24, 0x40	; 64
 2e0:	80 32       	cpi	r24, 0x20	; 32
 2e2:	30 f4       	brcc	.+12     	; 0x2f0 <lcd_putc+0x28>
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <lcd_putc+0x2a>
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <lcd_putc+0x2a>
 2ec:	80 e4       	ldi	r24, 0x40	; 64
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <lcd_putc+0x2a>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	80 58       	subi	r24, 0x80	; 128
 2f4:	e1 df       	rcall	.-62     	; 0x2b8 <lcd_command>
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <lcd_putc+0x36>
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0f df       	rcall	.-482    	; 0x11c <lcd_write>
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <lcd_puts>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	fc 01       	movw	r30, r24
 30c:	80 81       	ld	r24, Z
 30e:	88 23       	and	r24, r24
 310:	21 f0       	breq	.+8      	; 0x31a <lcd_puts+0x18>
 312:	da df       	rcall	.-76     	; 0x2c8 <lcd_putc>
 314:	89 91       	ld	r24, Y+
 316:	81 11       	cpse	r24, r1
 318:	fc cf       	rjmp	.-8      	; 0x312 <lcd_puts+0x10>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <lcd_init_samsung>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init_samsung(uint8_t dispAttr)
{
 320:	cf 93       	push	r28
 322:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 324:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 326:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 328:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 32a:	ea e0       	ldi	r30, 0x0A	; 10
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	80 81       	ld	r24, Z
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 33a:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 33c:	53 9a       	sbi	0x0a, 3	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 33e:	e0 e4       	ldi	r30, 0x40	; 64
 340:	fc e9       	ldi	r31, 0x9C	; 156
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <lcd_init_samsung+0x22>
 346:	e0 e4       	ldi	r30, 0x40	; 64
 348:	fc e9       	ldi	r31, 0x9C	; 156
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init_samsung+0x2a>
    delay(10000);        /* wait for more than 20ms or more after power-on       */


    /* initial write to lcd is 8bit */
    /* function set */
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_1);   /* dummy function set */                   
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	3e df       	rcall	.-388    	; 0x1ce <lcd_ini_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 352:	e0 ea       	ldi	r30, 0xA0	; 160
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init_samsung+0x36>
    /* function set */
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_1);   /* dummy function set */                   
    delay(40);                            /* wait for more than 39us */
   
    /* function set */
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_1);
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	38 df       	rcall	.-400    	; 0x1ce <lcd_ini_write>
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_2);   /* set 4-bit-interface */                   
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	36 df       	rcall	.-404    	; 0x1ce <lcd_ini_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 362:	e0 ea       	ldi	r30, 0xA0	; 160
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <lcd_init_samsung+0x46>
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_1);
    lcd_ini_write(KS0073_FUNCTION_4BIT_4BIT_INIT_2);   /* set 4-bit-interface */                   
    delay(40);                            /* wait for more than 39us */
   
    /* display ON/OFF control */ 
    lcd_ini_write(KS0073_DISPLAY_ONOFF_4BIT_INIT_1);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	30 df       	rcall	.-416    	; 0x1ce <lcd_ini_write>
    lcd_ini_write(KS0073_DISPLAY_ONOFF_4BIT_INIT_2);
 36e:	80 ee       	ldi	r24, 0xE0	; 224
 370:	2e df       	rcall	.-420    	; 0x1ce <lcd_ini_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 372:	e0 ea       	ldi	r30, 0xA0	; 160
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <lcd_init_samsung+0x56>
    lcd_ini_write(KS0073_DISPLAY_ONOFF_4BIT_INIT_1);
    lcd_ini_write(KS0073_DISPLAY_ONOFF_4BIT_INIT_2);
    delay(40);                            /* wait for more than 39us */
   
    /* clear display */ 
    lcd_ini_write(KS0073_CLEAR_DISPLAY_4BIT_INIT_1);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	28 df       	rcall	.-432    	; 0x1ce <lcd_ini_write>
    lcd_ini_write(KS0073_CLEAR_DISPLAY_4BIT_INIT_2);
 37e:	80 e1       	ldi	r24, 0x10	; 16
 380:	26 df       	rcall	.-436    	; 0x1ce <lcd_ini_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f9 e1       	ldi	r31, 0x19	; 25
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init_samsung+0x66>
    lcd_ini_write(KS0073_CLEAR_DISPLAY_4BIT_INIT_1);
    lcd_ini_write(KS0073_CLEAR_DISPLAY_4BIT_INIT_2);
    delay(1600);                            /* wait for more than 1.53ms */
   
    /* entry mode set */ 
    lcd_ini_write(KS0073_ENTRY_MODESET_4BIT_INIT_1);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	20 df       	rcall	.-448    	; 0x1ce <lcd_ini_write>
    lcd_ini_write(KS0073_ENTRY_MODESET_4BIT_INIT_2);
 38e:	80 e6       	ldi	r24, 0x60	; 96
 390:	1e df       	rcall	.-452    	; 0x1ce <lcd_ini_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 392:	e0 ea       	ldi	r30, 0xA0	; 160
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init_samsung+0x76>
    delay(40);
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
 39a:	84 e2       	ldi	r24, 0x24	; 36
 39c:	8d df       	rcall	.-230    	; 0x2b8 <lcd_command>
	lcd_command(KS0073_4LINES_MODE);
 39e:	89 e0       	ldi	r24, 0x09	; 9
 3a0:	8b df       	rcall	.-234    	; 0x2b8 <lcd_command>
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	89 df       	rcall	.-238    	; 0x2b8 <lcd_command>
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
//    lcd_command(LCD_DISP_OFF);              /* display off                  */
//    lcd_clrscr();                           /* display clear                */ 
//    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 3a6:	8c 2f       	mov	r24, r28
 3a8:	87 df       	rcall	.-242    	; 0x2b8 <lcd_command>

}/* lcd_init */
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <main>:
#include <stdlib.h>
#include "lcd.h"
#include <util/delay.h>

int main(void)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
	// LCD initialisieren
	lcd_init_samsung(LCD_DISP_ON_CURSOR_BLINK);
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	b2 df       	rcall	.-156    	; 0x320 <lcd_init_samsung>
	lcd_puts("Serial test:");
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	a0 df       	rcall	.-192    	; 0x302 <lcd_puts>
	
	// USART0 initialiseren: 8 Datenbit, 1 Stopbit, No Parity, 0600 bps, double speed...
	UBRR0 = 207;	// 9600bps
 3c2:	8f ec       	ldi	r24, 0xCF	; 207
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	90 93 c5 00 	sts	0x00C5, r25
 3ca:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0x02;	// double speed
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x18;	// Receiver und Transmitter enabled
 3d4:	88 e1       	ldi	r24, 0x18	; 24
 3d6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;	// 8 Datenbit
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	80 93 c2 00 	sts	0x00C2, r24
	
	//UDR0 = i;
	//char i = 0;
	char c = 'a';
 3e0:	81 e6       	ldi	r24, 0x61	; 97
 3e2:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = 'a';
 3e4:	80 93 c6 00 	sts	0x00C6, r24
    while(1)
    {	
		lcd_puts(&c);
		_delay_ms(100);
		UDR0 = c++;
 3e8:	0f 2e       	mov	r0, r31
 3ea:	f6 ec       	ldi	r31, 0xC6	; 198
 3ec:	ef 2e       	mov	r14, r31
 3ee:	f1 2c       	mov	r15, r1
 3f0:	f0 2d       	mov	r31, r0
		if(UCSR0A&(1<<RXC0)) // Warten bis Bit empfangen
 3f2:	00 ec       	ldi	r16, 0xC0	; 192
 3f4:	10 e0       	ldi	r17, 0x00	; 0
	//char i = 0;
	char c = 'a';
	UDR0 = 'a';
    while(1)
    {	
		lcd_puts(&c);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	83 df       	rcall	.-250    	; 0x302 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	81 ee       	ldi	r24, 0xE1	; 225
 400:	94 e0       	ldi	r25, 0x04	; 4
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <main+0x54>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <main+0x5e>
 40c:	00 00       	nop
		_delay_ms(100);
		UDR0 = c++;
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	98 0f       	add	r25, r24
 414:	99 83       	std	Y+1, r25	; 0x01
 416:	f7 01       	movw	r30, r14
 418:	80 83       	st	Z, r24
		if(UCSR0A&(1<<RXC0)) // Warten bis Bit empfangen
 41a:	f8 01       	movw	r30, r16
 41c:	80 81       	ld	r24, Z
 41e:	eb cf       	rjmp	.-42     	; 0x3f6 <main+0x48>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
